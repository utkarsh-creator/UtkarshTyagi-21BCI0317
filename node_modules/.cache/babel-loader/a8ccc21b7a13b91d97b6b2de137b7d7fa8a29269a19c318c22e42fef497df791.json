{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet stompClient = null;\nexport const connectWebSocket = onMessageReceived => {\n  const socket = new SockJS('http://localhost:8080/game');\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    connectHeaders: {},\n    debug: str => {\n      console.log('STOMP Debug:', str);\n    },\n    reconnectDelay: 5000,\n    heartbeatIncoming: 4000,\n    heartbeatOutgoing: 4000,\n    onConnect: frame => {\n      console.log('STOMP Connected:', frame);\n      stompClient.subscribe('/topic/gameState', message => {\n        console.log('Message received:', message);\n        onMessageReceived(message);\n      });\n    },\n    onStompError: frame => {\n      console.error('STOMP Error:', frame);\n    },\n    onWebSocketClose: () => {\n      console.log('WebSocket closed');\n    },\n    onWebSocketError: error => {\n      console.error('WebSocket Error:', error);\n    }\n  });\n  stompClient.activate();\n  return {\n    disconnect: () => {\n      var _stompClient;\n      (_stompClient = stompClient) === null || _stompClient === void 0 ? void 0 : _stompClient.deactivate();\n      console.log('STOMP Disconnected');\n    }\n  };\n};\nexport const sendMoveCommand = move => {\n  var _stompClient2;\n  if ((_stompClient2 = stompClient) !== null && _stompClient2 !== void 0 && _stompClient2.connected) {\n    stompClient.publish({\n      destination: '/app/move',\n      body: JSON.stringify(move)\n    });\n    console.log('Move command sent:', move);\n  } else {\n    console.error('STOMP client not connected');\n  }\n};\nexport const sendDeploymentData = deployment => {\n  var _stompClient3;\n  (_stompClient3 = stompClient) === null || _stompClient3 === void 0 ? void 0 : _stompClient3.send('/app/deployment', {}, JSON.stringify(deployment));\n};","map":{"version":3,"names":["Client","SockJS","stompClient","connectWebSocket","onMessageReceived","socket","webSocketFactory","connectHeaders","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","message","onStompError","error","onWebSocketClose","onWebSocketError","activate","disconnect","_stompClient","deactivate","sendMoveCommand","move","_stompClient2","connected","publish","destination","body","JSON","stringify","sendDeploymentData","deployment","_stompClient3","send"],"sources":["C:/Users/Trisha/hitwicket/hitwicket-chess-frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet stompClient = null;\n\nexport const connectWebSocket = (onMessageReceived) => {\n    const socket = new SockJS('http://localhost:8080/game');\n    \n    stompClient = new Client({\n        webSocketFactory: () => socket,\n        connectHeaders: {},\n        debug: (str) => {\n            console.log('STOMP Debug:', str);\n        },\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        onConnect: (frame) => {\n            console.log('STOMP Connected:', frame);\n            stompClient.subscribe('/topic/gameState', (message) => {\n                console.log('Message received:', message);\n                onMessageReceived(message);\n            });\n        },\n        onStompError: (frame) => {\n            console.error('STOMP Error:', frame);\n        },\n        onWebSocketClose: () => {\n            console.log('WebSocket closed');\n        },\n        onWebSocketError: (error) => {\n            console.error('WebSocket Error:', error);\n        }\n    });\n\n    stompClient.activate();\n\n    return {\n        disconnect: () => {\n            stompClient?.deactivate();\n            console.log('STOMP Disconnected');\n        }\n    };\n};\n\nexport const sendMoveCommand = (move) => {\n    if (stompClient?.connected) {\n        stompClient.publish({\n            destination: '/app/move',\n            body: JSON.stringify(move),\n        });\n        console.log('Move command sent:', move);\n    } else {\n        console.error('STOMP client not connected');\n    }\n};\n\nexport const sendDeploymentData = (deployment) => {\n    stompClient?.send('/app/deployment', {}, JSON.stringify(deployment));\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,gBAAgB,GAAIC,iBAAiB,IAAK;EACnD,MAAMC,MAAM,GAAG,IAAIJ,MAAM,CAAC,4BAA4B,CAAC;EAEvDC,WAAW,GAAG,IAAIF,MAAM,CAAC;IACrBM,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,cAAc,EAAE,CAAC,CAAC;IAClBC,KAAK,EAAGC,GAAG,IAAK;MACZC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,GAAG,CAAC;IACpC,CAAC;IACDG,cAAc,EAAE,IAAI;IACpBC,iBAAiB,EAAE,IAAI;IACvBC,iBAAiB,EAAE,IAAI;IACvBC,SAAS,EAAGC,KAAK,IAAK;MAClBN,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEK,KAAK,CAAC;MACtCd,WAAW,CAACe,SAAS,CAAC,kBAAkB,EAAGC,OAAO,IAAK;QACnDR,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEO,OAAO,CAAC;QACzCd,iBAAiB,CAACc,OAAO,CAAC;MAC9B,CAAC,CAAC;IACN,CAAC;IACDC,YAAY,EAAGH,KAAK,IAAK;MACrBN,OAAO,CAACU,KAAK,CAAC,cAAc,EAAEJ,KAAK,CAAC;IACxC,CAAC;IACDK,gBAAgB,EAAEA,CAAA,KAAM;MACpBX,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACnC,CAAC;IACDW,gBAAgB,EAAGF,KAAK,IAAK;MACzBV,OAAO,CAACU,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C;EACJ,CAAC,CAAC;EAEFlB,WAAW,CAACqB,QAAQ,CAAC,CAAC;EAEtB,OAAO;IACHC,UAAU,EAAEA,CAAA,KAAM;MAAA,IAAAC,YAAA;MACd,CAAAA,YAAA,GAAAvB,WAAW,cAAAuB,YAAA,uBAAXA,YAAA,CAAaC,UAAU,CAAC,CAAC;MACzBhB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACrC;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMgB,eAAe,GAAIC,IAAI,IAAK;EAAA,IAAAC,aAAA;EACrC,KAAAA,aAAA,GAAI3B,WAAW,cAAA2B,aAAA,eAAXA,aAAA,CAAaC,SAAS,EAAE;IACxB5B,WAAW,CAAC6B,OAAO,CAAC;MAChBC,WAAW,EAAE,WAAW;MACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC7B,CAAC,CAAC;IACFlB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiB,IAAI,CAAC;EAC3C,CAAC,MAAM;IACHlB,OAAO,CAACU,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACJ,CAAC;AAED,OAAO,MAAMgB,kBAAkB,GAAIC,UAAU,IAAK;EAAA,IAAAC,aAAA;EAC9C,CAAAA,aAAA,GAAApC,WAAW,cAAAoC,aAAA,uBAAXA,aAAA,CAAaC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAEL,IAAI,CAACC,SAAS,CAACE,UAAU,CAAC,CAAC;AACxE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}