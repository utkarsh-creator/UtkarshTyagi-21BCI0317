{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trisha\\\\hitwicket\\\\hitwicket-chess-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import Board from './components/Board';\n// import Controls from './components/Controls';\n// import { connectWebSocket, sendMoveCommand } from './websocket';\n\n// const App = () => {\n//     const [gameState, setGameState] = useState({\n//         grid: Array(5).fill(Array(5).fill(null)),\n//         currentPlayer: '',\n//         gameOver: false,\n//         winner: ''\n//     });\n\n//     useEffect(() => {\n//         // Establish WebSocket connection\n//         const ws = connectWebSocket((message) => {\n//             const newGameState = JSON.parse(message.body);\n//             setGameState(newGameState);\n//         });\n\n//         return () => ws.disconnect();\n//     }, []);\n\n//     const handleMove = (character, direction) => {\n//         if (!gameState.gameOver) {\n//             sendMoveCommand(character, direction);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Chess-like Game</h1>\n//             <Board grid={gameState.grid} />\n//             <Controls onMove={handleMove} currentPlayer={gameState.currentPlayer} />\n//             {gameState.gameOver && <h2>Game Over! Winner: {gameState.winner}</h2>}\n//         </div>\n//     );\n// };\n\n// export default App;\nimport React, { useEffect } from 'react';\nimport { connectWebSocket, sendMoveCommand } from './websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    // Connect to WebSocket when the component mounts\n    connectWebSocket();\n\n    // Cleanup WebSocket connection when the component unmounts\n    return () => {\n      // Add cleanup code if necessary\n    };\n  }, []);\n  const handleMove = () => {\n    // Example command\n    const moveCommand = JSON.stringify({\n      character: 'A-P1',\n      direction: 'R'\n    });\n    sendMoveCommand(moveCommand);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hitwicket Chess Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMove,\n      children: \"Make Move\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","connectWebSocket","sendMoveCommand","jsxDEV","_jsxDEV","App","_s","handleMove","moveCommand","JSON","stringify","character","direction","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Trisha/hitwicket/hitwicket-chess-frontend/src/App.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import Board from './components/Board';\n// import Controls from './components/Controls';\n// import { connectWebSocket, sendMoveCommand } from './websocket';\n\n// const App = () => {\n//     const [gameState, setGameState] = useState({\n//         grid: Array(5).fill(Array(5).fill(null)),\n//         currentPlayer: '',\n//         gameOver: false,\n//         winner: ''\n//     });\n\n//     useEffect(() => {\n//         // Establish WebSocket connection\n//         const ws = connectWebSocket((message) => {\n//             const newGameState = JSON.parse(message.body);\n//             setGameState(newGameState);\n//         });\n\n//         return () => ws.disconnect();\n//     }, []);\n\n//     const handleMove = (character, direction) => {\n//         if (!gameState.gameOver) {\n//             sendMoveCommand(character, direction);\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <h1>Chess-like Game</h1>\n//             <Board grid={gameState.grid} />\n//             <Controls onMove={handleMove} currentPlayer={gameState.currentPlayer} />\n//             {gameState.gameOver && <h2>Game Over! Winner: {gameState.winner}</h2>}\n//         </div>\n//     );\n// };\n\n// export default App;\nimport React, { useEffect } from 'react';\nimport { connectWebSocket, sendMoveCommand } from './websocket';\n\nconst App = () => {\n    useEffect(() => {\n        // Connect to WebSocket when the component mounts\n        connectWebSocket();\n\n        // Cleanup WebSocket connection when the component unmounts\n        return () => {\n            // Add cleanup code if necessary\n        };\n    }, []);\n\n    const handleMove = () => {\n        // Example command\n        const moveCommand = JSON.stringify({ character: 'A-P1', direction: 'R' });\n        sendMoveCommand(moveCommand);\n    };\n\n    return (\n        <div>\n            <h1>Hitwicket Chess Game</h1>\n            <button onClick={handleMove}>Make Move</button>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACdN,SAAS,CAAC,MAAM;IACZ;IACAC,gBAAgB,CAAC,CAAC;;IAElB;IACA,OAAO,MAAM;MACT;IAAA,CACH;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACrB;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC;MAAEC,SAAS,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAI,CAAC,CAAC;IACzEV,eAAe,CAACM,WAAW,CAAC;EAChC,CAAC;EAED,oBACIJ,OAAA;IAAAS,QAAA,gBACIT,OAAA;MAAAS,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7Bb,OAAA;MAAQc,OAAO,EAAEX,UAAW;MAAAM,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEd,CAAC;AAACX,EAAA,CAvBID,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAyBT,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}