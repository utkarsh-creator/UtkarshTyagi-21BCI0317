{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nconst socket = new SockJS('http://localhost:8080/game');\nconst client = new Client({\n  webSocketFactory: () => socket,\n  connectHeaders: {},\n  debug: str => console.log(str),\n  onConnect: frame => {\n    console.log('Connected: ' + frame);\n    client.subscribe('/topic/gameState', message => {\n      if (message.body) {\n        const gameState = JSON.parse(message.body);\n        console.log('Game State:', gameState);\n      }\n    });\n  },\n  onDisconnect: frame => {\n    console.log('Disconnected: ' + frame);\n  },\n  onStompError: frame => {\n    console.error('STOMP Error: ' + frame);\n  },\n  reconnectDelay: 5000\n});\nexport const connectWebSocket = () => client.activate();\nexport const sendMoveCommand = command => {\n  if (client.connected) {\n    client.publish({\n      destination: '/app/move',\n      body: command\n    });\n  } else {\n    console.error('WebSocket client is not connected.');\n  }\n};\nexport default client;","map":{"version":3,"names":["Client","SockJS","socket","client","webSocketFactory","connectHeaders","debug","str","console","log","onConnect","frame","subscribe","message","body","gameState","JSON","parse","onDisconnect","onStompError","error","reconnectDelay","connectWebSocket","activate","sendMoveCommand","command","connected","publish","destination"],"sources":["C:/Users/Trisha/hitwicket/hitwicket-chess-frontend/src/websocket.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nconst socket = new SockJS('http://localhost:8080/game');\nconst client = new Client({\n    webSocketFactory: () => socket,\n    connectHeaders: {},\n    debug: (str) => console.log(str),\n    onConnect: (frame) => {\n        console.log('Connected: ' + frame);\n        client.subscribe('/topic/gameState', (message) => {\n            if (message.body) {\n                const gameState = JSON.parse(message.body);\n                console.log('Game State:', gameState);\n            }\n        });\n    },\n    onDisconnect: (frame) => {\n        console.log('Disconnected: ' + frame);\n    },\n    onStompError: (frame) => {\n        console.error('STOMP Error: ' + frame);\n    },\n    reconnectDelay: 5000,\n});\n\nexport const connectWebSocket = () => client.activate();\nexport const sendMoveCommand = (command) => {\n    if (client.connected) {\n        client.publish({ destination: '/app/move', body: command });\n    } else {\n        console.error('WebSocket client is not connected.');\n    }\n};\n\nexport default client;\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC,4BAA4B,CAAC;AACvD,MAAME,MAAM,GAAG,IAAIH,MAAM,CAAC;EACtBI,gBAAgB,EAAEA,CAAA,KAAMF,MAAM;EAC9BG,cAAc,EAAE,CAAC,CAAC;EAClBC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAChCG,SAAS,EAAGC,KAAK,IAAK;IAClBH,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGE,KAAK,CAAC;IAClCR,MAAM,CAACS,SAAS,CAAC,kBAAkB,EAAGC,OAAO,IAAK;MAC9C,IAAIA,OAAO,CAACC,IAAI,EAAE;QACd,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAACC,IAAI,CAAC;QAC1CN,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEM,SAAS,CAAC;MACzC;IACJ,CAAC,CAAC;EACN,CAAC;EACDG,YAAY,EAAGP,KAAK,IAAK;IACrBH,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGE,KAAK,CAAC;EACzC,CAAC;EACDQ,YAAY,EAAGR,KAAK,IAAK;IACrBH,OAAO,CAACY,KAAK,CAAC,eAAe,GAAGT,KAAK,CAAC;EAC1C,CAAC;EACDU,cAAc,EAAE;AACpB,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAMnB,MAAM,CAACoB,QAAQ,CAAC,CAAC;AACvD,OAAO,MAAMC,eAAe,GAAIC,OAAO,IAAK;EACxC,IAAItB,MAAM,CAACuB,SAAS,EAAE;IAClBvB,MAAM,CAACwB,OAAO,CAAC;MAAEC,WAAW,EAAE,WAAW;MAAEd,IAAI,EAAEW;IAAQ,CAAC,CAAC;EAC/D,CAAC,MAAM;IACHjB,OAAO,CAACY,KAAK,CAAC,oCAAoC,CAAC;EACvD;AACJ,CAAC;AAED,eAAejB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}