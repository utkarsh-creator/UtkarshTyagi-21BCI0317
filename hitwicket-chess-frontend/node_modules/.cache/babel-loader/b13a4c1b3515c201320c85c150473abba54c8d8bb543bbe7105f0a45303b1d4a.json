{"ast":null,"code":"// import { Client } from '@stomp/stompjs';\n// import SockJS from 'sockjs-client';\n\n// const socket = new SockJS('http://localhost:8080/game');\n// const client = new Client({\n//     webSocketFactory: () => socket,\n//     connectHeaders: {},\n//     debug: (str) => console.log(str),\n//     onConnect: (frame) => {\n//         console.log('Connected: ' + frame);\n//         client.subscribe('/topic/gameState', (message) => {\n//             if (message.body) {\n//                 const gameState = JSON.parse(message.body);\n//                 console.log('Game State:', gameState);\n//             }\n//         });\n//     },\n//     onDisconnect: (frame) => {\n//         console.log('Disconnected: ' + frame);\n//     },\n//     onStompError: (frame) => {\n//         console.error('STOMP Error: ' + frame);\n//     },\n//     reconnectDelay: 5000,\n// });\n\n// export const connectWebSocket = () => client.activate();\n// export const sendMoveCommand = (command) => {\n//     if (client.connected) {\n//         client.publish({ destination: '/app/move', body: command });\n//     } else {\n//         console.error('WebSocket client is not connected.');\n//     }\n// };\n\n// export default client;\n\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nlet client;\nexport const connectWebSocket = onMessage => {\n  const socket = new SockJS('http://localhost:8080/game');\n  client = Stomp.over(socket);\n  client.connect({}, frame => {\n    client.subscribe('/topic/gameState', message => {\n      onMessage(message);\n    });\n  });\n\n  // Return an object with a disconnect method\n  return {\n    disconnect: () => client.disconnect()\n  };\n};\nexport const sendMoveCommand = move => {\n  if (client) {\n    client.send('/app/move', {}, JSON.stringify(move));\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","client","connectWebSocket","onMessage","socket","over","connect","frame","subscribe","message","disconnect","sendMoveCommand","move","send","JSON","stringify"],"sources":["C:/Users/Trisha/hitwicket/hitwicket-chess-frontend/src/websocket.js"],"sourcesContent":["// import { Client } from '@stomp/stompjs';\n// import SockJS from 'sockjs-client';\n\n// const socket = new SockJS('http://localhost:8080/game');\n// const client = new Client({\n//     webSocketFactory: () => socket,\n//     connectHeaders: {},\n//     debug: (str) => console.log(str),\n//     onConnect: (frame) => {\n//         console.log('Connected: ' + frame);\n//         client.subscribe('/topic/gameState', (message) => {\n//             if (message.body) {\n//                 const gameState = JSON.parse(message.body);\n//                 console.log('Game State:', gameState);\n//             }\n//         });\n//     },\n//     onDisconnect: (frame) => {\n//         console.log('Disconnected: ' + frame);\n//     },\n//     onStompError: (frame) => {\n//         console.error('STOMP Error: ' + frame);\n//     },\n//     reconnectDelay: 5000,\n// });\n\n// export const connectWebSocket = () => client.activate();\n// export const sendMoveCommand = (command) => {\n//     if (client.connected) {\n//         client.publish({ destination: '/app/move', body: command });\n//     } else {\n//         console.error('WebSocket client is not connected.');\n//     }\n// };\n\n// export default client;\n\n\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\n\nlet client;\n\nexport const connectWebSocket = (onMessage) => {\n    const socket = new SockJS('http://localhost:8080/game');\n    client = Stomp.over(socket);\n\n    client.connect({}, (frame) => {\n        client.subscribe('/topic/gameState', (message) => {\n            onMessage(message);\n        });\n    });\n\n    // Return an object with a disconnect method\n    return {\n        disconnect: () => client.disconnect(),\n    };\n};\n\nexport const sendMoveCommand = (move) => {\n    if (client) {\n        client.send('/app/move', {}, JSON.stringify(move));\n    }\n};\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,KAAK,MAAM,SAAS;AAE3B,IAAIC,MAAM;AAEV,OAAO,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EAC3C,MAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC,4BAA4B,CAAC;EACvDE,MAAM,GAAGD,KAAK,CAACK,IAAI,CAACD,MAAM,CAAC;EAE3BH,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC,EAAGC,KAAK,IAAK;IAC1BN,MAAM,CAACO,SAAS,CAAC,kBAAkB,EAAGC,OAAO,IAAK;MAC9CN,SAAS,CAACM,OAAO,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,CAAC;;EAEF;EACA,OAAO;IACHC,UAAU,EAAEA,CAAA,KAAMT,MAAM,CAACS,UAAU,CAAC;EACxC,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACrC,IAAIX,MAAM,EAAE;IACRA,MAAM,CAACY,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;EACtD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}