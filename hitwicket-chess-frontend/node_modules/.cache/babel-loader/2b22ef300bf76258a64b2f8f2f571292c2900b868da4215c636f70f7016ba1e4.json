{"ast":null,"code":"// import { Client } from '@stomp/stompjs';\n// import SockJS from 'sockjs-client';\n\n// const socket = new SockJS('http://localhost:8080/game');\n// const client = new Client({\n//     webSocketFactory: () => socket,\n//     connectHeaders: {},\n//     debug: (str) => console.log(str),\n//     onConnect: (frame) => {\n//         console.log('Connected: ' + frame);\n//         client.subscribe('/topic/gameState', (message) => {\n//             if (message.body) {\n//                 const gameState = JSON.parse(message.body);\n//                 console.log('Game State:', gameState);\n//             }\n//         });\n//     },\n//     onDisconnect: (frame) => {\n//         console.log('Disconnected: ' + frame);\n//     },\n//     onStompError: (frame) => {\n//         console.error('STOMP Error: ' + frame);\n//     },\n//     reconnectDelay: 5000,\n// });\n\n// export const connectWebSocket = () => client.activate();\n// export const sendMoveCommand = (command) => {\n//     if (client.connected) {\n//         client.publish({ destination: '/app/move', body: command });\n//     } else {\n//         console.error('WebSocket client is not connected.');\n//     }\n// };\n\n// export default client;\n\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nlet client;\nexport const connectWebSocket = onMessage => {\n  const socket = new SockJS('http://localhost:8080/game');\n  client = new Client({\n    webSocketFactory: () => socket,\n    onConnect: () => {\n      client.subscribe('/topic/gameState', message => {\n        onMessage(message);\n      });\n    },\n    debug: msg => console.log(msg),\n    onWebSocketClose: () => console.log('WebSocket closed')\n  });\n  client.activate(); // Activate the WebSocket connection\n\n  // Return an object with a disconnect method\n  return {\n    disconnect: () => client.deactivate()\n  };\n};\nexport const sendMoveCommand = move => {\n  if (client && client.connected) {\n    client.publish({\n      destination: '/app/move',\n      body: JSON.stringify(move)\n    });\n  }\n};","map":{"version":3,"names":["Client","SockJS","client","connectWebSocket","onMessage","socket","webSocketFactory","onConnect","subscribe","message","debug","msg","console","log","onWebSocketClose","activate","disconnect","deactivate","sendMoveCommand","move","connected","publish","destination","body","JSON","stringify"],"sources":["C:/Users/Trisha/hitwicket/hitwicket-chess-frontend/src/websocket.js"],"sourcesContent":["// import { Client } from '@stomp/stompjs';\n// import SockJS from 'sockjs-client';\n\n// const socket = new SockJS('http://localhost:8080/game');\n// const client = new Client({\n//     webSocketFactory: () => socket,\n//     connectHeaders: {},\n//     debug: (str) => console.log(str),\n//     onConnect: (frame) => {\n//         console.log('Connected: ' + frame);\n//         client.subscribe('/topic/gameState', (message) => {\n//             if (message.body) {\n//                 const gameState = JSON.parse(message.body);\n//                 console.log('Game State:', gameState);\n//             }\n//         });\n//     },\n//     onDisconnect: (frame) => {\n//         console.log('Disconnected: ' + frame);\n//     },\n//     onStompError: (frame) => {\n//         console.error('STOMP Error: ' + frame);\n//     },\n//     reconnectDelay: 5000,\n// });\n\n// export const connectWebSocket = () => client.activate();\n// export const sendMoveCommand = (command) => {\n//     if (client.connected) {\n//         client.publish({ destination: '/app/move', body: command });\n//     } else {\n//         console.error('WebSocket client is not connected.');\n//     }\n// };\n\n// export default client;\n\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\n\nlet client;\n\nexport const connectWebSocket = (onMessage) => {\n    const socket = new SockJS('http://localhost:8080/game');\n    client = new Client({\n        webSocketFactory: () => socket,\n        onConnect: () => {\n            client.subscribe('/topic/gameState', (message) => {\n                onMessage(message);\n            });\n        },\n        debug: (msg) => console.log(msg),\n        onWebSocketClose: () => console.log('WebSocket closed'),\n    });\n\n    client.activate(); // Activate the WebSocket connection\n\n    // Return an object with a disconnect method\n    return {\n        disconnect: () => client.deactivate(),\n    };\n};\n\nexport const sendMoveCommand = (move) => {\n    if (client && client.connected) {\n        client.publish({\n            destination: '/app/move',\n            body: JSON.stringify(move),\n        });\n    }\n};"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,IAAIC,MAAM;AAEV,OAAO,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EAC3C,MAAMC,MAAM,GAAG,IAAIJ,MAAM,CAAC,4BAA4B,CAAC;EACvDC,MAAM,GAAG,IAAIF,MAAM,CAAC;IAChBM,gBAAgB,EAAEA,CAAA,KAAMD,MAAM;IAC9BE,SAAS,EAAEA,CAAA,KAAM;MACbL,MAAM,CAACM,SAAS,CAAC,kBAAkB,EAAGC,OAAO,IAAK;QAC9CL,SAAS,CAACK,OAAO,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IACDC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChCG,gBAAgB,EAAEA,CAAA,KAAMF,OAAO,CAACC,GAAG,CAAC,kBAAkB;EAC1D,CAAC,CAAC;EAEFX,MAAM,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEnB;EACA,OAAO;IACHC,UAAU,EAAEA,CAAA,KAAMd,MAAM,CAACe,UAAU,CAAC;EACxC,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACrC,IAAIjB,MAAM,IAAIA,MAAM,CAACkB,SAAS,EAAE;IAC5BlB,MAAM,CAACmB,OAAO,CAAC;MACXC,WAAW,EAAE,WAAW;MACxBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;IAC7B,CAAC,CAAC;EACN;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}